"基本
syntax on
"USキーボード時のみ「:」「;」を逆転
nnoremap ; :
nnoremap : ;

set number     "行番号
set autoindent "インデント引き継ぎ
set showmode   "モード表示
set enc=utf-8
set fencs=utf-8
set tabstop=3
set shiftwidth=3
set expandtab
setlocal formatoptions-=r
setlocal formatoptions-=o
set wildmenu " コマンドモードの補完
set history=1000 " 保存するコマンド履歴の数

" ペースト時自動インデントを防ぐ
if &term =~ "xterm"
   let &t_SI .= "\e[?2004h"
   let &t_EI .= "\e[?2004l"
   let &pastetoggle = "\e[201~"

   function XTermPasteBegin(ret)
      set paste
      return a:ret
   endfunction
   inoremap <special> <expr> <Esc>[200~ XTermPasteBegin("")
endif

""マウス有効化
"if has('mouse')
"    set mouse=a
"    if has('mouse_sgr')
"        set ttymouse=sgr
"    elseif v:version > 703 || v:version is 703 && has('patch632')
"        set ttymouse=sgr
"    else
"        set ttymouse=xterm2
"    endif
"endif

"検索語をハイライト表示
set hlsearch
highlight Search ctermfg=white ctermbg=lightgreen
"ESC連打でハイライト解除
nnoremap <Esc><Esc> :nohlsearch<CR><Esc>

set title   "タイトルを表示
set ruler   "ルーラーを表示
set autoread   "他で書き換えられたら自動で読み直し
set showmatch  "対応するカッコのハイライト
set laststatus=2  "常にステータスラインを表示する
set noswapfile
set nobackup
"set nowrap "長い行の折りたたみを禁止
"前回開いたときの位置を呼び出し
function! GetEFstatus()
   let str = ''
   let fenc = ''
   if &fileformat == 'unix'
      let str = '[UNIX]'
   else
      let str = '[' . &fileformat . ']'
   endif
   if &fileencoding != ''
      if &fileencoding =~# 'iso-2022-jp'
         let fenc = 'J'
      elseif &fileencoding == 'utf-8'
         let fenc = 'U'
      elseif &fileencoding == 'cp932'
         let fenc = 'S'
      elseif &fileencoding =~# 'euc-jp'
         let fenc = 'E'
      else
         let fenc = &fileencoding
      endif
         let str = str . '[' . fenc . ']'
      else
         let str = str . '[-]'
      endif
         unlet fenc
         return str
      endfunction
set statusline=%-50.50F\ %16(\ %m%r%{GetEFstatus()}%)%=%l/%L\ %5P

"copy and paste"-related
set guioptions+=a
set clipboard+=autoselect
set clipboard+=unnamed
nmap ? :.w !pbcopy<CR><CR>
vmap ? :w !pbcopy<CR><CR>
nmap Z :r !pbpaste<CR>
vmap Z : !pbpaste<CR>


abbr incldue include
nnoremap vf ][v[[?^?s*$<CR>   "C/C++で関数を範囲選択
nnoremap vb /{<CR>%v%0     "forのエリア表示

"backspace function"
set backspace=indent,eol,start

"color setting
set background=dark
hi clear
if exists("syntax_on")
  syntax reset
endif
hi Normal guibg=Black guifg=seashell ctermfg=White
hi NonText guifg=LavenderBlush ctermfg=LightMagenta
hi DiffDelete guibg=DarkRed guifg=Black ctermbg=DarkRed ctermfg=White
hi DiffAdd guibg=DarkGreen ctermbg=DarkGreen ctermfg=White
hi DiffChange guibg=Gray30 ctermbg=DarkCyan ctermfg=White
hi DiffText gui=NONE guibg=DarkCyan ctermbg=DarkCyan ctermfg=Yellow
hi Comment guifg=LightBlue
hi PreProc ctermfg=Magenta
hi VertSplit guifg=Gray
hi Type gui=NONE
hi Identifier guifg=Cyan
hi Statement guifg=brown3 ctermfg=DarkRed
hi Search guibg=Gold3 ctermfg=White
hi Folded guibg=gray20
hi FoldColumn guibg=gray10

"mis-spelling"
highlight ZenkakuSpace cterm=underline ctermfg=DarkCyan guibg=white
match ZenkakuSpace /　/

" vim-indent-guides
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd   ctermbg=17
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven  ctermbg=18
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_guide_size=454
"let g:indent_guides_guide_size=1

"常に補完候補を表示するように
set completeopt=menuone
for k in split("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",'\zs')
  exec "imap <expr> " . k . " pumvisible() ? '" . k . "' : '" . k . "\<C-X>\<C-P>\<C-N>'"
endfor

"statusline
let g:hi_insert = 'highlight StatusLine guifg=darkblue guibg=darkyellow gui=none ctermfg=blue ctermbg=lightblue cterm=none'
if has('syntax')
   augroup InsertHook
       autocmd!
       autocmd InsertEnter * call s:StatusLine('Enter')
       autocmd InsertLeave * call s:StatusLine('Leave')
     augroup END
   endif
let s:slhlcmd = ''
function! s:StatusLine(mode)
  if a:mode == 'Enter'
    silent! let s:slhlcmd = 'highlight ' . s:GetHighlight('StatusLine')
    silent exec g:hi_insert
  else
    highlight clear StatusLine
    silent exec s:slhlcmd
  endif
endfunction

function! s:GetHighlight(hi)
  redir => hl
  exec 'highlight '.a:hi
  redir END
  let hl = substitute(hl, '[\r\n]', '', 'g')
  let hl = substitute(hl, 'xxx', '', '')
  return hl
endfunction

" Ward off unexpected things that your distro might have made, as
" well as sanely reset options when re-sourcing .vimrc
set nocompatible

" Set Dein base path (required)
let s:dein_base = '/Users/konosuke/.cache/dein'

" Set Dein source path (required)
let s:dein_src = '/Users/konosuke/.cache/dein/repos/github.com/Shougo/dein.vim'

" Set Dein runtime path (required)
execute 'set runtimepath+=' . s:dein_src

" Call Dein initialization (required)
call dein#begin(s:dein_base)

call dein#add(s:dein_src)

" Your plugins go here:
call dein#add('Shougo/neosnippet.vim')
call dein#add('Shougo/neosnippet-snippets')
call dein#add('Shougo/ddc.vim')
call dein#add('Shougo/ddc-sorter_rank')
call dein#add('nathanaelkane/vim-indent-guides')
call dein#add('scrooloose/nerdtree')
call dein#add('jistr/vim-nerdtree-tabs') " NERDTreeをタブ間で共有
call dein#add('bronson/vim-trailing-whitespace') " ファイル末尾の余分なスペースを可視化
call dein#add('vim-airline/vim-airline') " ステータスバー、タブバーのカスタマイズ
call dein#add('vim-airline/vim-airline-themes') " ステータスバー、タブバーのカスタマイズテーマ
call dein#add('tomasr/molokai')
call dein#add('markonm/traces.vim') " 置換時にリアルタイムで変換確認できる
" git関連
call dein#add('Xuyuanp/nerdtree-git-plugin') " ファイル変更時にNERDTreeに変更マークを表示
call dein#add('airblade/vim-gitgutter') " ファイル変更時に行に+, -を表示
call dein#add('tpope/vim-fugitive') "vim-airlineにブランチ情報を表示
"call dein#add('previm/previm') " markdownでカンマ区切りで記載して「:MakeTable!」でテーブル化する
call dein#add('plasticboy/vim-markdown')
call dein#add('kannokanno/previm') " markdownでカンマ区切りで記載して「:MakeTable!」でテーブル化する
"call dein#add('skanehira/preview-markdown.vim') " :PreviewMpreview-markdown.vim: mdr not found, please install mdearkdownでmarkdownのプレビューが見れる
call dein#add('tyru/open-browser.vim')  " previm用

" Finish Dein initialization (required)
call dein#end()

" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
if has('filetype')
  filetype indent plugin on
endif

" Enable syntax highlighting
if has('syntax')
  syntax on
endif

" Uncomment if you want to install not-installed plugins on startup.
if dein#check_install()
 call dein#install()
endif


"NERDTree設定---------------------------------------
"起動時にNERDTree起動
autocmd VimEnter *  NERDTree
""NERDTree起動後にカーソルを開いたファイルへ移動
autocmd VimEnter * wincmd w
"他のバッファをすべて閉じた時にNERDTreeが開いていたらNERDTreeも一緒に閉じる。
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" ファイルが指定されていなければNERD treeを有効にする
if argc() == 0
   let g:nerdtree_tabs_open_on_console_startup = 1
end
" 隠しファイルを表示する
let NERDTreeShowHidden = 1
" 新規タブ起動時にもTreeを表示
let g:nerdtree_tabs_open_on_console_startup=1
"-----------------------------------------------------
" vim-trainling-whitespaceで可視化した余分スペースを保存時に削除
autocmd BufWritePre * :FixWhitespace
"-----------------------------------------------------
""open-browser設定
""カーソル下のURLや単語をブラウザで開く
"nmap <Leader>b <Plug>(openbrowser-smart-search)
"vmap <Leader>b <Plug>(openbrowser-smart-search)
"-----------------------------------------------------
"------------------------------------------------------
" plasticboy/vim-markdown
" 折りたたみの禁止
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0

" kannokanno/previm
autocmd BufRead,BufNewFile *.md set filetype=markdown
let g:previm_open_cmd = 'open -a Google\ Chrome'
" ctrl pでプレビュー
nnoremap <silent> <C-p> :PrevimOpen<CR>

" tyru/open-browser.vim
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)

"-----------------------------------------------------
" vim-airline設定
" タブバーのカスタマイズを有効にする
let g:airline#extensions#tabline#enabled = 1
" タブバーの右領域を非表示にする
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
" バッファに番号表示
"let g:airline#extensions#tabline#buffer_idx_mode = 1
" 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
let g:airline#extensions#tabline#tab_nr_type = 1
" （タブが一個の場合）バッファのリストをタブラインに表示する機能をオフ
let g:airline#extensions#tabline#show_buffers = 0
" タブの区切り文字を'/'に変更
let g:airline#extensions#tabline#left_alt_sep = '|'
colorscheme molokai
set t_Co=256

